% To test the entire program you can run command which simulates the game, 
% but also reveals whole gameboard so you can choose specific type of position for testing.
% To run this test you need to run command:
?- test.


% Just to test if printing the field is working.
?- print_game_board(3, 3, 5, [[.,1,.], [., x, 4], [1, 2, x]]).
Number of mines is: 5

   | 1  2  3 
------------
 1 | .  1  .
 2 | .  x  4
 3 | 1  2  x
true.


% Checking correct padding of the printed number (for the table). 
?- print_number(5).
 5 
true.

?- print_number(10). 
10 
true.

?- print_number(25).  
25 
true.


% Testing random subset generation.
?- random_subset([1, 5, 4, 7, -3], 3, X).
e.g. X = [4, 5, -3].
% should random set of 3 elements from the list above 
% (repeat to check if sets are different).

% Invalid subsets.
?- random_subset([1, 5, 4, 7, -3], 6, X).
false.

?- random_subset([], 6, X).
false.


% Test generating prefilled matrix.

% empty
?- generate_matrix(0, 0, x, X).
X = [] ;
false.

% 1x1 matrix
?- generate_matrix(1,1,x, X). 
X = [[x]] ;
false.

% 1x3 matrix (3 columns)
?- generate_matrix(1,3,x, X). 
X = [[x, x, x]] ;
false.

% 3x1 matrix (3 rows)
?- generate_matrix(3,1,x, X). 
X = [[x], [x], [x]] ;
false.

% 3x2 matrix (3 rows)
?- generate_matrix(3,2,x, X). 
X = [[x, x], [x, x], [x, x]] ;
false.

% 3x3 matrix
?- generate_matrix(3,3,x, X). 
X = [[x, x, x], [x, x, x], [x, x, x]] ;
false.


% Tests value replacing in matrix.

% empty matrix
?- replace_in_matrix([], 0, x, 0, X). 
false.

% 1x1 matrix
?- replace_in_matrix([[.]], 0, x, 1, X).           
X = [[x]].

% 1x3 matrix (3 columns)
?- replace_in_matrix([[.,.,.]], 1, x, 3, X).                        
X = [['.', x, '.']].

% 3x1 matrix (3 rows)
?- replace_in_matrix([[.], [.], [.]], 1, x, 1, X). 
X = [['.'], [x], ['.']].

% 3x3 matrix Index = 0 (position (1,1))
?- replace_in_matrix([[.,.,.], [., ., .], [., ., .]], 0, x, 3, X).
X = [[x, '.', '.'], ['.', '.', '.'], ['.', '.', '.']].

% 3x3 matrix Index = 5 (position (2,3))
?- replace_in_matrix([[.,.,.], [., ., .], [., ., .]], 5, x, 3, X). 
X = [['.', '.', '.'], ['.', '.', x], ['.', '.', '.']].

% 3x3 matrix Index = 8 (position (3,3))
?- replace_in_matrix([[.,.,.], [., ., .], [., ., .]], 8, x, 3, X). 
X = [['.', '.', '.'], ['.', '.', '.'], ['.', '.', x]].

% Bad index - overflow
?- replace_in_matrix([[.,.,.], [., ., .], [., ., .]], 9, x, 3, X). 
false.

% Bad index - underflow
?- replace_in_matrix([[.,.,.], [., ., .], [., ., .]], -1, x, 3, X).
false.


% Coordinates -> index convertion tests
?- convert_coord_index(1, 1, 3, X).
X = 0.

?- convert_coord_index(1, 3, 3, X).  
X = 2.

?- convert_coord_index(2, 1, 3, X). 
X = 3.

?- convert_coord_index(2, 1, 1, X). 
X = 1.

?- convert_coord_index(2, 2, 3, X). 
X = 4.


% Index -> coordinates convertion tests
?- convert_index_coord(0, 3, Row, Column).              
Row = Column, Column = 1.

?- convert_index_coord(2, 3, Row, Column). 
Row = 1,
Column = 3.

?- convert_index_coord(3, 3, Row, Column). 
Row = 2,
Column = 1.

?- convert_index_coord(7, 3, Row, Column). 
Row = 3,
Column = 2.

?- convert_index_coord(3, 1, Row, Column). 
Row = 4,
Column = 1.


% Obtaining value from matrix tests.
?- get_value_matrix([[.,1,.], [., x, 4], [1, 2, x]], 0, 3, X).
X =  ('.').

?- get_value_matrix([[.,1,.], [., x, 4], [1, 2, x]], 4, 3, X). 
X = x.

?- get_value_matrix([[.,1,.], [., x, 4], [1, 2, x]], 6, 3, X). 
X = 1.

?- get_value_matrix([[.,1,.], [., x, 4], [1, 2, x]], 8, 3, X). 
X = x.


% Generating gameboard test - to check correct size and num of 
% mines and counts of adjacent mines
?- generate_game_board(3, 3, 3, X). 
e.g. X = [[2, x, x], [2, x, 3], [1, 1, 1]].
% There should be 3 symbols of 'x', rest numbers (num of adjacent mines).


% Counting adjacent mines tests (works only for at least 3 rows and 3 columns).

% No mines
?- count_adjacent(3, 3, [[.,.,.],[.,.,.],[.,.,.]], X).
X = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] .

% One mine in the middle
?- count_adjacent(3, 3, [[.,.,.],[.,x,.],[.,.,.]], X). 
X = [[1, 1, 1], [1, x, 1], [1, 1, 1]] .

% One mine in the top-left corner
?- count_adjacent(3, 3, [[x,.,.],[.,.,.],[.,.,.]], X). 
X = [[x, 1, 0], [1, 1, 0], [0, 0, 0]] .

% One mine in the top-right corner
?- count_adjacent(3, 3, [[.,.,x],[.,.,.],[.,.,.]], X). 
X = [[0, 1, x], [0, 1, 1], [0, 0, 0]] .

% One mine in the bottom-left corner
?- count_adjacent(3, 3, [[.,.,.],[.,.,.],[x,.,.]], X). 
X = [[0, 0, 0], [1, 1, 0], [x, 1, 0]] .

% One mine in the bottom-right corner
?- count_adjacent(3, 3, [[.,.,.],[.,.,.],[.,.,x]], X). 
X = [[0, 0, 0], [0, 1, 1], [0, 1, x]] .

% Two mines
?- count_adjacent(3, 3, [[.,.,.],[.,x,.],[.,.,x]], X). 
X = [[1, 1, 1], [1, x, 2], [1, 2, x]] .

% Three mines and direct neighbours.
?- count_adjacent(3, 3, [[.,.,.],[.,x,.],[.,x,x]], X).  
X = [[1, 1, 1], [2, x, 3], [2, x, x]] .


% Cell request tests:

% Correct input
?- request_row_col(3, 3, [[.,.,.],[1,1,3],[2,.,.]], Row, Col).
Row    of cell to reveal:  1.
Column of cell to reveal:  |: 1.

Row = Col, Col = 1.

% One bad input
?- request_row_col(3, 3, [[.,.,.],[1,1,3],[2,.,.]], Row, Col).
Row    of cell to reveal:  2.
Column of cell to reveal:  |: 2.
Bad input. Please enter again.
Row    of cell to reveal:  |: 3.
Column of cell to reveal:  |: 2.

Row = 3,
Col = 2.

% Various bad inputs bad coordinates and already revealed cells.
?- request_row_col(3, 3, [[.,.,.],[1,1,3],[2,.,.]], Row, Col).
Row    of cell to reveal:  0.
Column of cell to reveal:  |: 1.
Bad input. Please enter again.
Row    of cell to reveal:  |: 1.
Column of cell to reveal:  |: 4.
Bad input. Please enter again.
Row    of cell to reveal:  |: 2.
Column of cell to reveal:  |: 2.
Bad input. Please enter again.
Row    of cell to reveal:  |: 1.
Column of cell to reveal:  |: 1.

Row = Col, Col = 1.

% Not square gameboard
?- request_row_col(2, 3, [[.,.,.],[1,1,3]], Row, Col).         
Row    of cell to reveal:  1.
Column of cell to reveal:  |: 3.

Row = 1,
Col = 3.

?- request_row_col(2, 3, [[.,.,.],[1,1,3]], Row, Col). 
Row    of cell to reveal:  3.
Column of cell to reveal:  |: 1.
Bad input. Please enter again.
Row    of cell to reveal:  |: 2.
Column of cell to reveal:  |: 3.
Bad input. Please enter again.
Row    of cell to reveal:  |: 1.
Column of cell to reveal:  |: 3.

Row = 1,
Col = 3.


% Cell revealing tests:

% Reveal position with non-zero number
?- Row = 2, Column = 1, NumToReveal = 7,                                                                       
Gameboard = [[0, 0, 0], [1, 1, 0], [x, 1, 0]], Revealed = [[.,.,.],[.,1,.],[.,.,.]],
print_field(3, 3, Gameboard), nl,
print_field(3, 3, Revealed), nl,
reveal_position(Row, Column, 3, 3, NumToReveal, Gameboard, Revealed, NewNumToReveal, ToReveal, NewRevealed),
print_field(3, 3, NewRevealed).
   | 1  2  3 
------------
 1 | 0  0  0
 2 | 1  1  0
 3 | x  1  0

   | 1  2  3
------------
 1 | .  .  .
 2 | .  1  .
 3 | .  .  .

   | 1  2  3 
------------
 1 | .  .  .
 2 | 1  1  .
 3 | .  .  .
Row = 2,
Column = ToReveal, ToReveal = 1,
NumToReveal = 7,
Gameboard = [[0, 0, 0], [1, 1, 0], [x, 1, 0]],
Revealed = [['.', '.', '.'], ['.', 1, '.'], ['.', '.', '.']],
NewNumToReveal = 6,
NewRevealed = [['.', '.', '.'], [1, 1, '.'], ['.', '.', '.']] .


% Reveal position with 0 mines neighbours
?- Row = 1, Column = 1, NumToReveal = 7,                                                                       
Gameboard = [[0, 0, 0], [1, 1, 0], [x, 1, 0]], Revealed = [[.,.,.],[.,1,.],[.,.,.]],
print_field(3, 3, Gameboard), nl,
print_field(3, 3, Revealed), nl,
reveal_position(Row, Column, 3, 3, NumToReveal, Gameboard, Revealed, NewNumToReveal, ToReveal, NewRevealed),
print_field(3, 3, NewRevealed).
   | 1  2  3 
------------
 1 | 0  0  0
 2 | 1  1  0
 3 | x  1  0

   | 1  2  3
------------
 1 | .  .  .
 2 | .  1  .
 3 | .  .  .

   | 1  2  3
------------
 1 | 0  0  0
 2 | 1  1  0
 3 | .  1  0
Row = Column, Column = 1,
NumToReveal = 7,
Gameboard = [[0, 0, 0], [1, 1, 0], [x, 1, 0]],
Revealed = [['.', '.', '.'], ['.', 1, '.'], ['.', '.', '.']],
NewNumToReveal = ToReveal, ToReveal = 0,
NewRevealed = [[0, 0, 0], [1, 1, 0], ['.', 1, 0]] .


% Reveal cell with mine.
?- Row = 3, Column = 1, NumToReveal = 7,                                                                       
Gameboard = [[0, 0, 0], [1, 1, 0], [x, 1, 0]], Revealed = [[.,.,.],[.,1,.],[.,.,.]],
print_field(3, 3, Gameboard), nl,
print_field(3, 3, Revealed), nl,
reveal_position(Row, Column, 3, 3, NumToReveal, Gameboard, Revealed, NewNumToReveal, ToReveal, NewRevealed),
print_field(3, 3, NewRevealed).
   | 1  2  3 
------------
 1 | 0  0  0
 2 | 1  1  0
 3 | x  1  0

   | 1  2  3
------------
 1 | .  .  .
 2 | .  1  .
 3 | .  .  .

   | 1  2  3
------------
 1 | .  .  . 
 2 | .  1  .
 3 | x  .  .
Row = 3,
Column = 1,
NumToReveal = 7,
Gameboard = [[0, 0, 0], [1, 1, 0], [x, 1, 0]],
Revealed = [['.', '.', '.'], ['.', 1, '.'], ['.', '.', '.']],
NewNumToReveal = 6,
ToReveal = x,
NewRevealed = [['.', '.', '.'], ['.', 1, '.'], [x, '.', '.']] .
